import { ethers, artifacts } from "hardhat";

/**
 * Deploys a standard snarkjs/circom Verifier.sol (contract named `Verifier`).
 * Ensure your generated Verifier.sol is placed under `contracts/` and compiled.
 */
async function main() {
  const [deployer] = await ethers.getSigners();
  console.log("Network:", (await ethers.provider.getNetwork()).chainId);
  console.log("Deployer:", deployer.address);

  // Ensure Verifier artifact exists (contracts/Verifier.sol should be generated by snarkjs)
  let name = process.env.VERIFIER_CONTRACT_NAME?.trim() || "Verifier";
  try {
    await artifacts.readArtifact(name);
  } catch (e1) {
    // Auto-fallback to common snarkjs name
    const alt = "Groth16Verifier";
    try {
      await artifacts.readArtifact(alt);
      name = alt;
    } catch (e2) {
      console.error(`Artifact for contract "${name}" not found and fallback "${alt}" also missing.\n` +
        "- Ensure contracts/Verifier.sol exists (generated by snarkjs) and run `npm run compile`.\n" +
        "- If your generated contract name is different, set VERIFIER_CONTRACT_NAME=<Name> and rerun.\n");
      throw e1;
    }
  }
  const Verifier = await ethers.getContractFactory(name);
  const verifier = await Verifier.deploy();
  await verifier.waitForDeployment();
  console.log("Verifier deployed at:", await verifier.getAddress());
}

main().catch((err) => {
  console.error(err);
  process.exitCode = 1;
});
